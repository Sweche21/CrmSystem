package com.crm.repository;

import com.crm.entity.Seller;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
class SellerRepositoryTest {

    @Autowired
    private TestEntityManager entityManager;

    @Autowired
    private SellerRepository sellerRepository;

    @Test
    void findByName_WhenSellerExists_ShouldReturnSeller() {

        Seller seller = new Seller("Иван Петров", "ivan@mail.com");
        entityManager.persistAndFlush(seller);

        Optional<Seller> found = sellerRepository.findByName("Иван Петров");

        assertTrue(found.isPresent());
        assertEquals("Иван Петров", found.get().getName());
        assertEquals("ivan@mail.com", found.get().getContactInfo());
    }

    @Test
    void findByName_WhenSellerNotExists_ShouldReturnEmpty() {
        Optional<Seller> found = sellerRepository.findByName("Несуществующий");

        assertFalse(found.isPresent());
    }

    @Test
    void findSellersWithTotalLessThan_ShouldReturnSellersBelowThreshold() {

        Seller seller1 = new Seller("Иван Петров", "ivan@mail.com");
        Seller seller2 = new Seller("Петр Сидоров", "petr@mail.com");
        entityManager.persist(seller1);
        entityManager.persist(seller2);
        entityManager.flush();

        com.crm.entity.Transaction transaction1 = new com.crm.entity.Transaction();
        transaction1.setSeller(seller1);
        transaction1.setAmount(new BigDecimal("1000"));
        transaction1.setPaymentType(com.crm.entity.PaymentType.CARD);
        transaction1.setTransactionDate(LocalDateTime.now().minusDays(1));
        entityManager.persist(transaction1);

        com.crm.entity.Transaction transaction2 = new com.crm.entity.Transaction();
        transaction2.setSeller(seller2);
        transaction2.setAmount(new BigDecimal("3000"));
        transaction2.setPaymentType(com.crm.entity.PaymentType.CASH);
        transaction2.setTransactionDate(LocalDateTime.now().minusDays(2));
        entityManager.persist(transaction2);

        entityManager.flush();

        LocalDateTime startDate = LocalDateTime.now().minusDays(10);
        LocalDateTime endDate = LocalDateTime.now();
        BigDecimal minAmount = new BigDecimal("2500");

        List<Object[]> results = sellerRepository.findSellersWithTotalLessThan(
                startDate, endDate, minAmount);

        assertEquals(1, results.size());
        assertEquals(seller1.getId(), results.get(0)[0]);
        assertEquals("Иван Петров", results.get(0)[1]);
        assertEquals(new BigDecimal("1000.00"), results.get(0)[2]);
    }

    @Test
    void findSellersWithTotalLessThan_WhenNoSellersBelowThreshold_ShouldReturnEmpty() {

        Seller seller = new Seller("Иван Петров", "ivan@mail.com");
        entityManager.persist(seller);
        entityManager.flush();

        com.crm.entity.Transaction transaction = new com.crm.entity.Transaction();
        transaction.setSeller(seller);
        transaction.setAmount(new BigDecimal("5000"));
        transaction.setPaymentType(com.crm.entity.PaymentType.CARD);
        transaction.setTransactionDate(LocalDateTime.now().minusDays(1));
        entityManager.persist(transaction);
        entityManager.flush();

        LocalDateTime startDate = LocalDateTime.now().minusDays(10);
        LocalDateTime endDate = LocalDateTime.now();
        BigDecimal minAmount = new BigDecimal("1000");

        List<Object[]> results = sellerRepository.findSellersWithTotalLessThan(
                startDate, endDate, minAmount);

        assertTrue(results.isEmpty());
    }

    @Test
    void save_ShouldPersistSellerWithAutoGeneratedFields() {

        Seller seller = new Seller("Новый Продавец", "new@mail.com");

        Seller saved = sellerRepository.save(seller);

        assertNotNull(saved.getId());
        assertNotNull(saved.getRegistrationDate());
        assertEquals("Новый Продавец", saved.getName());
        assertEquals("new@mail.com", saved.getContactInfo());
    }

    @Test
    void findAll_ShouldReturnAllSellers() {

        Seller seller1 = new Seller("Иван Петров", "ivan@mail.com");
        Seller seller2 = new Seller("Петр Сидоров", "petr@mail.com");
        entityManager.persist(seller1);
        entityManager.persist(seller2);
        entityManager.flush();

        List<Seller> sellers = sellerRepository.findAll();

        assertEquals(2, sellers.size());
        assertTrue(sellers.stream().anyMatch(s -> s.getName().equals("Иван Петров")));
        assertTrue(sellers.stream().anyMatch(s -> s.getName().equals("Петр Сидоров")));
    }
}